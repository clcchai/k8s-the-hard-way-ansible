---

- name: Create Role apiserver-to-kubelet
  copy:
    content: |
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
            - ""
          resources:
            - nodes/proxy
            - nodes/stats
            - nodes/log
            - nodes/spec
            - nodes/metrics
          verbs:
            - "*"
    dest: /var/lib/kubernetes/kube-apiserver-to-kubelet.role.yml

- name: Create Rolebinding apiserver-to-kubelet
  copy:
    content: |
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: system:kube-apiserver
        namespace: ""
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:kube-apiserver-to-kubelet
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes
    dest: /var/lib/kubernetes/kube-apiserver-to-kubelet.rolebinding.yml

- name: Enumerate Kubernates cluster roles and bindings
  command: "{{ item }}"
  register: kubectl_api_kubelet
  changed_when: false
  ignore_errors: true
  with_items:
    - kubectl get clusterroles -o name system:kube-apiserver-to-kubelet
    - kubectl get clusterrolebindings -o name system:kube-apiserver

- name: Ensure system:kube-apiserver-to-kubelet ClusterRole is present
  shell: kubectl apply -f kube-apiserver-to-kubelet.role.yml
  args:
    chdir: /var/lib/kubernetes
  when: kubectl_api_kubelet.results.0.rc != 0

- name: Bind the system:kube-apiserver-to-kubelet ClusterRole
  shell: kubectl apply -f kube-apiserver-to-kubelet.rolebinding.yml
  args:
    chdir: /var/lib/kubernetes
  when: kubectl_api_kubelet.results.1.rc != 0
